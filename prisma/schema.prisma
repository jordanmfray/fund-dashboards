generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  age                  Int?
  currentChallenges    String[]
  hopefulOutcomes      String[]
  income               Float?
  jobTitle             String?
  maritalStatus        String?
  numberOfChildren     Int?
  yearsInJob           Int?
  applications         Application[]
  milestoneReflections MilestoneReflection[]
  ratings              Rating[]
  reviews              Review[]
  sessions             Session[]
  surveyResponses      SurveyResponse[]
}

model Fund {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  totalAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sessions    Session[]
  programs    Program[] @relation("FundToProgram")
}

model Session {
  id                   Int                   @id @default(autoincrement())
  status               SessionStatus         @default(IN_PROGRESS)
  outcomeData          Json
  fundId               Int
  programId            Int
  userId               Int
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  application          Application?
  milestoneReflections MilestoneReflection[]
  rating               Rating?
  review               Review?
  fund                 Fund                  @relation(fields: [fundId], references: [id])
  program              Program               @relation(fields: [programId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  surveyResponses      SurveyResponse[]

  @@unique([userId, programId])
}

model Program {
  id                  Int         @id @default(autoincrement())
  name                String      @unique
  description         String
  applicationTemplate Json?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  milestones          Milestone[]
  questions           Question[]
  sessions            Session[]
  funds               Fund[]      @relation("FundToProgram")
  surveys             Survey[]    @relation("ProgramToSurvey")
}

model Survey {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  type        SurveyType
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   Question[]
  responses   SurveyResponse[]
  programs    Program[]        @relation("ProgramToSurvey")
}

model Question {
  id        Int                @id @default(autoincrement())
  text      String
  type      QuestionType
  options   Json?
  required  Boolean            @default(false)
  order     Int
  surveyId  Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  context   QuestionContext    @default(SURVEY)
  programId Int?
  program   Program?           @relation(fields: [programId], references: [id])
  survey    Survey?            @relation(fields: [surveyId], references: [id])
  responses QuestionResponse[]

  @@unique([surveyId, order])
  @@unique([programId, order])
}

model SurveyResponse {
  id                Int                @id @default(autoincrement())
  surveyId          Int
  sessionId         Int
  userId            Int
  completedAt       DateTime           @default(now())
  questionResponses QuestionResponse[]
  session           Session            @relation(fields: [sessionId], references: [id])
  survey            Survey             @relation(fields: [surveyId], references: [id])
  user              User               @relation(fields: [userId], references: [id])

  @@unique([surveyId, sessionId])
}

model QuestionResponse {
  id               Int             @id @default(autoincrement())
  questionId       Int
  surveyResponseId Int?
  answer           Json
  createdAt        DateTime        @default(now())
  applicationId    Int?
  application      Application?    @relation(fields: [applicationId], references: [id])
  question         Question        @relation(fields: [questionId], references: [id])
  surveyResponse   SurveyResponse? @relation(fields: [surveyResponseId], references: [id])

  @@unique([questionId, surveyResponseId])
  @@unique([questionId, applicationId])
}

model Milestone {
  id          Int                   @id @default(autoincrement())
  title       String
  description String
  order       Int
  programId   Int
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  program     Program               @relation(fields: [programId], references: [id])
  reflections MilestoneReflection[]

  @@unique([programId, order])
}

model MilestoneReflection {
  id          Int       @id @default(autoincrement())
  milestoneId Int
  sessionId   Int
  userId      Int
  content     String
  completedAt DateTime  @default(now())
  milestone   Milestone @relation(fields: [milestoneId], references: [id])
  session     Session   @relation(fields: [sessionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([milestoneId, sessionId])
}

model Application {
  id                Int                @id @default(autoincrement())
  sessionId         Int                @unique
  userId            Int
  responses         Json?
  status            String
  submittedAt       DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  session           Session            @relation(fields: [sessionId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  questionResponses QuestionResponse[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  sessionId Int      @unique
  userId    Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  sessionId Int      @unique
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  FUND_MANAGER
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
}

enum SurveyType {
  PRE
  POST
}

enum QuestionType {
  MULTIPLE_CHOICE
  CHECKBOX
  TEXT
  LIKERT
}

enum QuestionContext {
  SURVEY
  APPLICATION
}
